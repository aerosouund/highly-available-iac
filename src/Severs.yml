Description:
    Script that creates servers

Parameters:
    EnvironmentName:
      Description: name to be appended to resources
      Type: String

    ASGMaxSize:
      Description: Maximum number of instances in the autoscaling group
      Type: String
      Default: '5'

    HealthCheckPort:
      Description: The port that the load balancer runs health checks on
      Type: String
      Default: '80'
    
Resources:

    #Security Groups
    SG:
      Type: AWS::EC2::SecurityGroup
      Properties:
          GroupDescription: allows traffic on port 80
          VpcId:
            Fn::ImportValue:
              !Sub ${EnvironmentName}-VPC
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              SourceSecurityGroupId: !Ref JumpBoxSG
          SecurityGroupEgress:
            - IpProtocol: -1
              FromPort: -1
              ToPort: -1
              CidrIp: 0.0.0.0/0
          Tags:
            - Key: Name
              Value: !Ref EnvironmentName


    LBSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: allows traffic from the public internet on port 80
        VpcId:
          Fn::ImportValue:
            !Sub ${EnvironmentName}-VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: -1
            ToPort: -1
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName


    JumpBoxSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: allows SSH access for the jumpbox
        VpcId:
          Fn::ImportValue:
            !Sub ${EnvironmentName}-VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: -1
            ToPort: -1
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName

        
    #IAM Roles and policies
    RoleForS3Access: 
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName


    ServerInstanceProfile: 
      Type: AWS::IAM::InstanceProfile
      Properties: 
        Roles: 
          - !Ref RoleForS3Access

    #Servers
    JumpBox:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: ami-04505e74c0741db8d
        InstanceType: t3.medium
        NetworkInterfaces: 
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: "0"
          GroupSet: 
            - !Ref JumpBoxSG
          SubnetId: 
            Fn::ImportValue:
              !Sub ${EnvironmentName}-Public-Net1
        BlockDeviceMappings:
          - DeviceName: /dev/sdk
            Ebs:
              VolumeSize: '20'


    WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install apache2 -y
            sudo systemctl start apache2.service  
            truncate -s 0 /var/www/html/index.html  
            echo 'Udagram is Live!' >> /var/www/html/index.html    
        ImageId: ami-04505e74c0741db8d
        IamInstanceProfile: !Ref ServerInstanceProfile
        SecurityGroups:
          - !Ref SG
        InstanceType: t3.medium
        BlockDeviceMappings:
          - DeviceName: /dev/sdk
            Ebs:
              VolumeSize: '20'
        


    WebAppGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
        - Fn::ImportValue: 
            !Sub ${EnvironmentName}-Private-Nets
        LaunchConfigurationName:
          !Ref WebAppLaunchConfig
        MinSize: '4'
        MaxSize: !Ref ASGMaxSize
        TargetGroupARNs:
          - !Ref TargetGroup
        Tags:
          - Key: Name
            PropagateAtLaunch: true
            Value: !Ref EnvironmentName

    #Load Balancer
    LB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
          - Fn::ImportValue: !Sub ${EnvironmentName}-Public-Net1
          - Fn::ImportValue: !Sub ${EnvironmentName}-Public-Net2
        SecurityGroups:
          - !Ref LBSG
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName


    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn: 
              !Ref TargetGroup
        LoadBalancerArn:
          !Ref LB
        Port: '80'
        Protocol: HTTP
        


    ListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
          - Type: forward
            TargetGroupArn: !Ref TargetGroup
        Conditions:
          - Field: path-pattern
            Values: [/]
        ListenerArn: !Ref Listener
        Priority: 1


    TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: !Ref HealthCheckPort
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId: 
          Fn::ImportValue:
            Fn::Sub: ${EnvironmentName}-VPC
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName


Outputs:
  LoadBalancerDNS:
    Value: !Join ['//', ['http:', !GetAtt LB.DNSName]]
    Export: 
      Name: LoadBalancer-DNS

